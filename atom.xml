<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杨小白</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://littlebaiyang.github.io/"/>
  <updated>2018-07-12T08:23:28.373Z</updated>
  <id>https://littlebaiyang.github.io/</id>
  
  <author>
    <name>杨小白</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring 源码分析--2：启动</title>
    <link href="https://littlebaiyang.github.io/2018/07/12/springboot2/"/>
    <id>https://littlebaiyang.github.io/2018/07/12/springboot2/</id>
    <published>2018-07-11T16:00:00.000Z</published>
    <updated>2018-07-12T08:23:28.373Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1695556135,2938104612&amp;fm=27&amp;gp=0.jpg" alt=""></p>
<h2>3.执行启动流程</h2>
<p>接下来我们来看启动的主题代码，如下：
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</div><div class="line">		StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</div><div class="line">		stopWatch.start();</div><div class="line">		ConfigurableApplicationContext context = <span class="keyword">null</span>;</div><div class="line">		Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		configureHeadlessProperty();</div><div class="line">		SpringApplicationRunListeners listeners = getRunListeners(args);</div><div class="line">		listeners.starting();</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(</div><div class="line">					args);</div><div class="line">			ConfigurableEnvironment environment = prepareEnvironment(listeners,</div><div class="line">					applicationArguments);</div><div class="line">			configureIgnoreBeanInfo(environment);</div><div class="line">			Banner printedBanner = printBanner(environment);</div><div class="line">			context = createApplicationContext();</div><div class="line">			exceptionReporters = getSpringFactoriesInstances(</div><div class="line">					SpringBootExceptionReporter.class,</div><div class="line">					<span class="keyword">new</span> Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</div><div class="line">			prepareContext(context, environment, listeners, applicationArguments,</div><div class="line">					printedBanner);</div><div class="line">			refreshContext(context);</div><div class="line">			afterRefresh(context, applicationArguments);</div><div class="line">			stopWatch.stop();</div><div class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</div><div class="line">				<span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)</div><div class="line">						.logStarted(getApplicationLog(), stopWatch);</div><div class="line">			&#125;</div><div class="line">			listeners.started(context);</div><div class="line">			callRunners(context, applicationArguments);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">			handleRunFailure(context, ex, exceptionReporters, listeners);</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			listeners.running(context);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">			handleRunFailure(context, ex, exceptionReporters, <span class="keyword">null</span>);</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> context;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>代码中的前几行的StopWatch类就是计算线程的执行时间，又兴趣的话可以看一下：<a href="https://www.cnblogs.com/kaituorensheng/p/7105639.html" target="_blank" rel="external">链接</a></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ConfigurableApplicationContext context = <span class="keyword">null</span>;</div><div class="line">Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">configureHeadlessProperty();</div></pre></td></tr></table></figure></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SYSTEM_PROPERTY_JAVA_AWT_HEADLESS = <span class="string">"java.awt.headless"</span>;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">configureHeadlessProperty</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.setProperty(SYSTEM_PROPERTY_JAVA_AWT_HEADLESS, System.getProperty(</div><div class="line">				SYSTEM_PROPERTY_JAVA_AWT_HEADLESS, Boolean.toString(<span class="keyword">this</span>.headless)));</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码初始化了部分数据，并且查看系统的环境变量是否存在：java.awt.headless，不存在赋值为true(这里的值是初始化，也可以在代码中赋初始值 )，放进去。</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SpringApplicationRunListeners listeners = getRunListeners(args);</div><div class="line">listeners.starting();</div></pre></td></tr></table></figure></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> SpringApplicationRunListeners <span class="title">getRunListeners</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	Class&lt;?&gt;[] types = <span class="keyword">new</span> Class&lt;?&gt;[] &#123; SpringApplication.class, String[].class &#125;;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> SpringApplicationRunListeners(logger, getSpringFactoriesInstances(</div><div class="line">			SpringApplicationRunListener.class, types, <span class="keyword">this</span>, args));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># Run Listeners</div><div class="line">org.springframework.boot.SpringApplicationRunListener=\</div><div class="line">org.springframework.boot.context.event.EventPublishingRunListener</div></pre></td></tr></table></figure></p>
<p>从上面的spring.factories中可以看出这里启动的是EventPublishingRunListener，并且从以下的start代码可以看得出来，他对所有的初始化的listener进行广播了ApplicationStartingEvent事件。而初始化的10个listener对不同的事件有不同的支持：</p>
<table>
<thead>
<tr>
<th>初始化的listener</th>
<th>支持的事件</th>
</tr>
</thead>
<tbody>
<tr>
<td>ClearCachesApplicationListener</td>
<td>ContextRefreshedEvent</td>
</tr>
<tr>
<td>ParentContextCloserApplicationListener</td>
<td>ParentContextAvailableEvent</td>
</tr>
<tr>
<td>FileEncodingApplicationListener</td>
<td>ApplicationEnvironmentPreparedEvent</td>
</tr>
<tr>
<td>AnsiOutputApplicationListener</td>
<td>ApplicationEnvironmentPreparedEvent</td>
</tr>
<tr>
<td>ConfigFileApplicationListener</td>
<td>ApplicationEnvironmentPreparedEvent 和ApplicationPreparedEvent</td>
</tr>
<tr>
<td>DelegatingApplicationListener</td>
<td>ApplicationEnvironmentPreparedEvent和其他的event</td>
</tr>
<tr>
<td>ClasspathLoggingApplicationListener</td>
<td>ApplicationEnvironmentPreparedEvent 和ApplicationFailedEvent 打debug日志</td>
</tr>
<tr>
<td>LoggingApplicationListener</td>
<td>ApplicationStartingEvent、ApplicationEnvironmentPreparedEvent、ApplicationPreparedEvent、ContextClosedEvent的子类、ApplicationFailedEvent     主要进行log系统的操作</td>
</tr>
<tr>
<td>LiquibaseServiceLocatorApplicationListener</td>
<td>ApplicationStartingEvent</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>之后操作到了咱们进行详细的说明。</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">listeners.starting();</div></pre></td></tr></table></figure></p>
<p>最先进入的是LoggingApplicationListener，代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (event <span class="keyword">instanceof</span> ApplicationStartingEvent) &#123;</div><div class="line">			onApplicationStartingEvent((ApplicationStartingEvent) event);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">instanceof</span> ApplicationEnvironmentPreparedEvent) &#123;</div><div class="line">			onApplicationEnvironmentPreparedEvent(</div><div class="line">					(ApplicationEnvironmentPreparedEvent) event);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">instanceof</span> ApplicationPreparedEvent) &#123;</div><div class="line">			onApplicationPreparedEvent((ApplicationPreparedEvent) event);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">instanceof</span> ContextClosedEvent &amp;&amp; ((ContextClosedEvent) event)</div><div class="line">				.getApplicationContext().getParent() == <span class="keyword">null</span>) &#123;</div><div class="line">			onContextClosedEvent();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">instanceof</span> ApplicationFailedEvent) &#123;</div><div class="line">			onApplicationFailedEvent();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onApplicationStartingEvent</span><span class="params">(ApplicationStartingEvent event)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.loggingSystem = LoggingSystem</div><div class="line">				.get(event.getSpringApplication().getClassLoader());</div><div class="line">		<span class="keyword">this</span>.loggingSystem.beforeInitialize();</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>log系统初始化之前的操作。接下来是DelegatingApplicationListener，代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (event <span class="keyword">instanceof</span> ApplicationEnvironmentPreparedEvent) &#123;</div><div class="line">			List&lt;ApplicationListener&lt;ApplicationEvent&gt;&gt; delegates = getListeners(</div><div class="line">					((ApplicationEnvironmentPreparedEvent) event).getEnvironment());</div><div class="line">			<span class="keyword">if</span> (delegates.isEmpty()) &#123;</div><div class="line">				<span class="keyword">return</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">this</span>.multicaster = <span class="keyword">new</span> SimpleApplicationEventMulticaster();</div><div class="line">			<span class="keyword">for</span> (ApplicationListener&lt;ApplicationEvent&gt; listener : delegates) &#123;</div><div class="line">				<span class="keyword">this</span>.multicaster.addApplicationListener(listener);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.multicaster != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">this</span>.multicaster.multicastEvent(event);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>由于本地变量multicaster为null，所以直接跳出。（作用把Listener转发给配置的这些class处理，这样可以支持外围代码不去写spring.factories中的org.springframework.context.ApplicationListener相关配置，保持springboot原来代码的稳定），最后是LiquibaseServiceLocatorApplicationListener，它的作用是 如果存在，则使用springboot相关的版本进行替代</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationStartingEvent event)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (ClassUtils.isPresent(<span class="string">"liquibase.servicelocator.CustomResolverServiceLocator"</span>,</div><div class="line">				event.getSpringApplication().getClassLoader())) &#123;</div><div class="line">			<span class="keyword">new</span> LiquibasePresent().replaceServiceLocator();</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>我这里也是直接跳过。接下来又会回到SpringApplication的文件中</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(</div><div class="line">					args);</div><div class="line">ConfigurableEnvironment environment = prepareEnvironment(listeners,</div><div class="line">					applicationArguments);</div><div class="line">configureIgnoreBeanInfo(environment);</div><div class="line">Banner printedBanner = printBanner(environment);</div></pre></td></tr></table></figure></p>
<p>初始化参数，之后进入prepareEnvironment，代码如下</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> ConfigurableEnvironment <span class="title">prepareEnvironment</span><span class="params">(</span></span></div><div class="line">			SpringApplicationRunListeners listeners,</div><div class="line">			ApplicationArguments applicationArguments) &#123;</div><div class="line">		<span class="comment">// Create and configure the environment</span></div><div class="line">		ConfigurableEnvironment environment = getOrCreateEnvironment();</div><div class="line">		configureEnvironment(environment, applicationArguments.getSourceArgs());</div><div class="line">		listeners.environmentPrepared(environment);</div><div class="line">		bindToSpringApplication(environment);</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.webApplicationType == WebApplicationType.NONE) &#123;</div><div class="line">			environment = <span class="keyword">new</span> EnvironmentConverter(getClassLoader())</div><div class="line">					.convertToStandardEnvironmentIfNecessary(environment);</div><div class="line">		&#125;</div><div class="line">		ConfigurationPropertySources.attach(environment);</div><div class="line">		<span class="keyword">return</span> environment;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> ConfigurableEnvironment <span class="title">getOrCreateEnvironment</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.environment != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.environment;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.webApplicationType == WebApplicationType.SERVLET) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> StandardServletEnvironment();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> StandardEnvironment();</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到，显示获取了本地的环境，如果没有就判断当前的web环境，如果是SERVLET就返回StandardServletEnvironment，否则返回StandardEnvironment。之后是配置这个环境，代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configureEnvironment</span><span class="params">(ConfigurableEnvironment environment,</span></span></div><div class="line">			String[] args) &#123;</div><div class="line">		configurePropertySources(environment, args);</div><div class="line">		configureProfiles(environment, args);</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>显示配置参数之后是配置profile。之后的*listeners.environmentPrepared(environment);*则进行一些类的listener的响应。最新进入ConfigFileApplicationListener：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (event <span class="keyword">instanceof</span> ApplicationEnvironmentPreparedEvent) &#123;</div><div class="line">			onApplicationEnvironmentPreparedEvent(</div><div class="line">					(ApplicationEnvironmentPreparedEvent) event);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (event <span class="keyword">instanceof</span> ApplicationPreparedEvent) &#123;</div><div class="line">			onApplicationPreparedEvent(event);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onApplicationEnvironmentPreparedEvent</span><span class="params">(</span></span></div><div class="line">			ApplicationEnvironmentPreparedEvent event) &#123;</div><div class="line">		List&lt;EnvironmentPostProcessor&gt; postProcessors = loadPostProcessors();</div><div class="line">		postProcessors.add(<span class="keyword">this</span>);</div><div class="line">		AnnotationAwareOrderComparator.sort(postProcessors);</div><div class="line">		<span class="keyword">for</span> (EnvironmentPostProcessor postProcessor : postProcessors) &#123;</div><div class="line">			postProcessor.postProcessEnvironment(event.getEnvironment(),</div><div class="line">					event.getSpringApplication());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function">List&lt;EnvironmentPostProcessor&gt; <span class="title">loadPostProcessors</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> SpringFactoriesLoader.loadFactories(EnvironmentPostProcessor.class,</div><div class="line">				getClass().getClassLoader());</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>首先loadPostProcessors获取的资源如下：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Environment Post Processors</div><div class="line">org.springframework.boot.env.EnvironmentPostProcessor=\</div><div class="line">org.springframework.boot.cloud.CloudFoundryVcapEnvironmentPostProcessor,\</div><div class="line">org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessor,\</div><div class="line">org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor</div></pre></td></tr></table></figure></p>
<p>首先进入SystemEnvironmentPropertySourceEnvironmentPostProcessor</p>
<p>代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME = <span class="string">"systemEnvironment"</span>;	</div><div class="line"><span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessEnvironment</span><span class="params">(ConfigurableEnvironment environment,</span></span></div><div class="line">			SpringApplication application) &#123;</div><div class="line">		String sourceName = StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME;</div><div class="line">		PropertySource&lt;?&gt; propertySource = environment.getPropertySources()</div><div class="line">				.get(sourceName);</div><div class="line">		<span class="keyword">if</span> (propertySource != <span class="keyword">null</span>) &#123;</div><div class="line">			replacePropertySource(environment, sourceName, propertySource);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">replacePropertySource</span><span class="params">(ConfigurableEnvironment environment,</span></span></div><div class="line">			String sourceName, PropertySource&lt;?&gt; propertySource) &#123;</div><div class="line">		Map&lt;String, Object&gt; originalSource = (Map&lt;String, Object&gt;) propertySource</div><div class="line">				.getSource();</div><div class="line">		SystemEnvironmentPropertySource source = <span class="keyword">new</span> OriginAwareSystemEnvironmentPropertySource(</div><div class="line">				sourceName, originalSource);</div><div class="line">		environment.getPropertySources().replace(sourceName, source);</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>把名字为systemEnvironment的配置修改成需要的类的格式。接下来进入SpringApplicationJsonEnvironmentPostProcessor：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessEnvironment</span><span class="params">(ConfigurableEnvironment environment,</span></span></div><div class="line">		SpringApplication application) &#123;</div><div class="line">	MutablePropertySources propertySources = environment.getPropertySources();</div><div class="line">	StreamSupport.stream(propertySources.spliterator(), <span class="keyword">false</span>)</div><div class="line">			.map(JsonPropertyValue::get).filter(Objects::nonNull).findFirst()</div><div class="line">			.ifPresent((v) -&gt; processJson(environment, v));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果是惊悚格式就修改成正常的键值对的格式。最后进入CloudFoundryVcapEnvironmentPostProcessor：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessEnvironment</span><span class="params">(ConfigurableEnvironment environment,</span></span></div><div class="line">			SpringApplication application) &#123;</div><div class="line">		<span class="keyword">if</span> (CloudPlatform.CLOUD_FOUNDRY.isActive(environment)) &#123;</div><div class="line">			Properties properties = <span class="keyword">new</span> Properties();</div><div class="line">			addWithPrefix(properties, getPropertiesFromApplication(environment),</div><div class="line">					<span class="string">"vcap.application."</span>);</div><div class="line">			addWithPrefix(properties, getPropertiesFromServices(environment),</div><div class="line">					<span class="string">"vcap.services."</span>);</div><div class="line">			MutablePropertySources propertySources = environment.getPropertySources();</div><div class="line">			<span class="keyword">if</span> (propertySources.contains(</div><div class="line">					CommandLinePropertySource.COMMAND_LINE_PROPERTY_SOURCE_NAME)) &#123;</div><div class="line">				propertySources.addAfter(</div><div class="line">						CommandLinePropertySource.COMMAND_LINE_PROPERTY_SOURCE_NAME,</div><div class="line">						<span class="keyword">new</span> PropertiesPropertySource(<span class="string">"vcap"</span>, properties));</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				propertySources</div><div class="line">						.addFirst(<span class="keyword">new</span> PropertiesPropertySource(<span class="string">"vcap"</span>, properties));</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>因为我启动的是普通的springboot应用没有使用cloud的环境，所以直接跳过。</p>
<p>总结一下ConfigFileApplicationListener就是修改化境中的配置的操作。</p>
<p>之后进入AnsiOutputApplicationListener，操作的含义是配置输出的log的颜色的，可以通过配置<strong>spring.output.ansi.enabled=false</strong>来修改，默认是彩色的。</p>
<p>之后是ClasspathLoggingApplicationListener，只是输出了debug日志。</p>
<p>DelegatingApplicationListener：转发一下广播</p>
<p>FileEncodingApplicationListener：确认一下文件的编码格式和系统的编码格式是否一致。</p>
<p>之后回到SpringApplication的prepareEnvironment方法，后面的操作是把前面产生的环境绑定到main方法上面。</p>
<p>回到run方法中：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">configureIgnoreBeanInfo(environment);</div><div class="line">Banner printedBanner = printBanner(environment);</div><div class="line">context = createApplicationContext();</div><div class="line">exceptionReporters = getSpringFactoriesInstances(SpringBootExceptionReporter.class,</div><div class="line">					<span class="keyword">new</span> Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</div></pre></td></tr></table></figure></p>
<p>首先第一行的代码实现：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">configureIgnoreBeanInfo</span><span class="params">(ConfigurableEnvironment environment)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (System.getProperty(</div><div class="line">				CachedIntrospectionResults.IGNORE_BEANINFO_PROPERTY_NAME) == <span class="keyword">null</span>) &#123;</div><div class="line">			Boolean ignore = environment.getProperty(<span class="string">"spring.beaninfo.ignore"</span>,</div><div class="line">					Boolean.class, Boolean.TRUE);</div><div class="line">			System.setProperty(CachedIntrospectionResults.IGNORE_BEANINFO_PROPERTY_NAME,</div><div class="line">					ignore.toString());</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>获取系统参数spring.beaninfo.ignore，如果没有就获取配置文件中的该参数，没有就赋值true。最后设置到系统配置上面。</p>
<p>第二行的代码：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Banner <span class="title">printBanner</span><span class="params">(ConfigurableEnvironment environment)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.bannerMode == Banner.Mode.OFF) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">	ResourceLoader resourceLoader = (<span class="keyword">this</span>.resourceLoader != <span class="keyword">null</span> ? <span class="keyword">this</span>.resourceLoader</div><div class="line">			: <span class="keyword">new</span> DefaultResourceLoader(getClassLoader()));</div><div class="line">	SpringApplicationBannerPrinter bannerPrinter = <span class="keyword">new</span> SpringApplicationBannerPrinter(</div><div class="line">			resourceLoader, <span class="keyword">this</span>.banner);</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.bannerMode == Mode.LOG) &#123;</div><div class="line">		<span class="keyword">return</span> bannerPrinter.print(environment, <span class="keyword">this</span>.mainApplicationClass, logger);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> bannerPrinter.print(environment, <span class="keyword">this</span>.mainApplicationClass, System.out);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果banner模式为off则直接返回，不是就往下走。之后获取resourceLoader，初始化SpringApplicationBannerPrinter，最后查看banner的模式是log还是CONSOLE，看看是如何输出的。(终于有输出了)。</p>
<p>第三行代码：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> ConfigurableApplicationContext <span class="title">createApplicationContext</span><span class="params">()</span> </span>&#123;</div><div class="line">		Class&lt;?&gt; contextClass = <span class="keyword">this</span>.applicationContextClass;</div><div class="line">		<span class="keyword">if</span> (contextClass == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">switch</span> (<span class="keyword">this</span>.webApplicationType) &#123;</div><div class="line">				<span class="keyword">case</span> SERVLET:</div><div class="line">					contextClass = Class.forName(DEFAULT_WEB_CONTEXT_CLASS);</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				<span class="keyword">case</span> REACTIVE:</div><div class="line">					contextClass = Class.forName(DEFAULT_REACTIVE_WEB_CONTEXT_CLASS);</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				<span class="keyword">default</span>:</div><div class="line">					contextClass = Class.forName(DEFAULT_CONTEXT_CLASS);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</div><div class="line">						<span class="string">"Unable create a default ApplicationContext, "</span></div><div class="line">								+ <span class="string">"please specify an ApplicationContextClass"</span>,</div><div class="line">						ex);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> (ConfigurableApplicationContext) BeanUtils.instantiateClass(contextClass);</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>根据环境的不同，常见不同的上线文。</p>
<p>第四行代码：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">Collection&lt;T&gt; <span class="title">getSpringFactoriesInstances</span><span class="params">(Class&lt;T&gt; type,</span></span></div><div class="line">		Class&lt;?&gt;[] parameterTypes, Object... args) &#123;</div><div class="line">	ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</div><div class="line">	<span class="comment">// Use names and ensure unique to protect against duplicates</span></div><div class="line">	Set&lt;String&gt; names = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(</div><div class="line">			SpringFactoriesLoader.loadFactoryNames(type, classLoader));</div><div class="line">	List&lt;T&gt; instances = createSpringFactoriesInstances(type, parameterTypes,</div><div class="line">			classLoader, args, names);</div><div class="line">	AnnotationAwareOrderComparator.sort(instances);</div><div class="line">	<span class="keyword">return</span> instances;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>根据type获取在”META-INF/spring.factories”的配置，之后把parameterTypes传入构造方法初始化，之后获取的对象如下：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1ft726ibvlfj30ib0eeq57.jpg" alt=""></p>
<p>回到run方法，之后代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">prepareContext(context, environment, listeners, applicationArguments,</div><div class="line">					printedBanner);</div><div class="line">refreshContext(context);</div><div class="line">afterRefresh(context, applicationArguments);</div></pre></td></tr></table></figure></p>
<p>第一行代码配置应用上下文：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">private void prepareContext(ConfigurableApplicationContext context,</div><div class="line">			ConfigurableEnvironment environment, SpringApplicationRunListeners listeners,ApplicationArguments applicationArguments, Banner printedBanner) &#123;</div><div class="line">		#给应用上下文设置环境变量	</div><div class="line">    	context.setEnvironment(environment);</div><div class="line">		postProcessApplicationContext(context);</div><div class="line">    	#将上面设置的initializers初始化</div><div class="line">		applyInitializers(context);</div><div class="line">    	#listener什么也没有做，空方法</div><div class="line">		listeners.contextPrepared(context);</div><div class="line">		#打印出日志，分别有当前应用的信息和profile信息	</div><div class="line">    	if (this.logStartupInfo) &#123;</div><div class="line">			logStartupInfo(context.getParent() == null);</div><div class="line">			logStartupProfileInfo(context);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		// Add boot specific singleton beans</div><div class="line">		context.getBeanFactory().registerSingleton("springApplicationArguments",</div><div class="line">				applicationArguments);</div><div class="line">		if (printedBanner != null) &#123;</div><div class="line">			context.getBeanFactory().registerSingleton("springBootBanner", printedBanner);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		// Load the sources</div><div class="line">		Set&lt;Object&gt; sources = getAllSources();</div><div class="line">		Assert.notEmpty(sources, "Sources must not be empty");</div><div class="line">    	#把sources带有Component注解的bean注册到应用上下文中</div><div class="line">		load(context, sources.toArray(new Object[0]));</div><div class="line">		listeners.contextLoaded(context);</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>最后一行完成了所有的listener添加到应用上下文中，并且广播ApplicationPreparedEvent方法。代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoaded</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (ApplicationListener&lt;?&gt; listener : <span class="keyword">this</span>.application.getListeners()) &#123;</div><div class="line">		<span class="keyword">if</span> (listener <span class="keyword">instanceof</span> ApplicationContextAware) &#123;</div><div class="line">			((ApplicationContextAware) listener).setApplicationContext(context);</div><div class="line">		&#125;</div><div class="line">		context.addApplicationListener(listener);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">this</span>.initialMulticaster.multicastEvent(</div><div class="line">			<span class="keyword">new</span> ApplicationPreparedEvent(<span class="keyword">this</span>.application, <span class="keyword">this</span>.args, context));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>之后进入ConfigFileApplicationListener，代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onApplicationPreparedEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.logger.replayTo(ConfigFileApplicationListener.class);</div><div class="line">		addPostProcessors(((ApplicationPreparedEvent) event).getApplicationContext());</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addPostProcessors</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</div><div class="line">		context.addBeanFactoryPostProcessor(</div><div class="line">				<span class="keyword">new</span> PropertySourceOrderingPostProcessor(context));</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>进入LoggingApplicationListener，将log系统加入beanfactory，代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onApplicationPreparedEvent</span><span class="params">(ApplicationPreparedEvent event)</span> </span>&#123;</div><div class="line">		ConfigurableListableBeanFactory beanFactory = event.getApplicationContext()</div><div class="line">				.getBeanFactory();</div><div class="line">		<span class="keyword">if</span> (!beanFactory.containsBean(LOGGING_SYSTEM_BEAN_NAME)) &#123;</div><div class="line">			beanFactory.registerSingleton(LOGGING_SYSTEM_BEAN_NAME, <span class="keyword">this</span>.loggingSystem);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>最后进入run方法的最后几行代码：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#该方法是触发容器加载BeanDefinition以及创建对象等等一切操作的始发点，定义了作为应用上下文对象的一个抽  象层面的标准流程。所有spring应用上下文的初始化都是基于这个标准流程的。			</div><div class="line">refreshContext(context);</div><div class="line">#空方法	</div><div class="line">afterRefresh(context, applicationArguments);</div><div class="line">#停止时间计时			</div><div class="line">stopWatch.stop();</div><div class="line">#打出log			</div><div class="line">if (this.logStartupInfo) &#123;</div><div class="line">	new StartupInfoLogger(this.mainApplicationClass)</div><div class="line">			.logStarted(getApplicationLog(), stopWatch);</div><div class="line">&#125;</div><div class="line">#listener发布ApplicationStartedEvent事件		</div><div class="line">listeners.started(context);</div><div class="line">callRunners(context, applicationArguments);</div></pre></td></tr></table></figure></p>
<p>最后一行的方法如下：启动了所有的runner方法</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">callRunners</span><span class="params">(ApplicationContext context, ApplicationArguments args)</span> </span>&#123;</div><div class="line">	List&lt;Object&gt; runners = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">	runners.addAll(context.getBeansOfType(ApplicationRunner.class).values());</div><div class="line">	runners.addAll(context.getBeansOfType(CommandLineRunner.class).values());</div><div class="line">	AnnotationAwareOrderComparator.sort(runners);</div><div class="line">	<span class="keyword">for</span> (Object runner : <span class="keyword">new</span> LinkedHashSet&lt;&gt;(runners)) &#123;</div><div class="line">		<span class="keyword">if</span> (runner <span class="keyword">instanceof</span> ApplicationRunner) &#123;</div><div class="line">			callRunner((ApplicationRunner) runner, args);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (runner <span class="keyword">instanceof</span> CommandLineRunner) &#123;</div><div class="line">			callRunner((CommandLineRunner) runner, args);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1695556135,2938104612&amp;amp;fm=27&amp;amp;gp=0.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2&gt;3.执行启动流程&lt;/h2&gt;
&lt;p&gt;接下来我们来看启动的主题代码，如下：
    
    </summary>
    
    
      <category term="spring" scheme="https://littlebaiyang.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>spring 源码分析--1：入口和初始化</title>
    <link href="https://littlebaiyang.github.io/2018/07/10/springboot1/"/>
    <id>https://littlebaiyang.github.io/2018/07/10/springboot1/</id>
    <published>2018-07-09T16:00:00.000Z</published>
    <updated>2018-07-12T08:23:28.364Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1ft6uaeq3x6j30et08c3zc.jpg" alt=""></p>
<h2>1. 入口</h2>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public static void main(String[] args) &#123;</div><div class="line">	#1.初始化SpringApplication类，之后执行run方法</div><div class="line">    new SpringApplication(ApringTestApplication.class).run(args);</div><div class="line">	#2.直接调用SpringApplication类中的run的静态方法</div><div class="line">	SpringApplication.run(ApringTestApplication.class, args);</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>一般来说，由以上两种的启动springboot的方法，但是两种方法草你个本质上来说是一样的。接下来咱们来看一下第二种方法中run静态方法中的执行：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Class&lt;?&gt; primarySource,</span></span></div><div class="line">		String... args) &#123;</div><div class="line">	<span class="keyword">return</span> run(<span class="keyword">new</span> Class&lt;?&gt;[] &#123; primarySource &#125;, args);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a id="more"></a></p>
<p>进入两一个run方法，进入之后的方法如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Class&lt;?&gt;[] primarySources,</span></span></div><div class="line">			String[] args) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SpringApplication(primarySources).run(args);</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>到这里之后大家可以看出来，第二种执行的静态方法最终也是初始化类，之后调用类的run方法。</p>
<h2>2.初始化</h2>
<p>进入类的初始化可以看到如下代码：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(Class&lt;?&gt;... primarySources)</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>(<span class="keyword">null</span>, primarySources);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再进入：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>.resourceLoader = resourceLoader;</div><div class="line">	Assert.notNull(primarySources, <span class="string">"PrimarySources must not be null"</span>);</div><div class="line">	<span class="keyword">this</span>.primarySources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</div><div class="line">	<span class="keyword">this</span>.webApplicationType = deduceWebApplicationType();</div><div class="line">	setInitializers((Collection) getSpringFactoriesInstances(</div><div class="line">			ApplicationContextInitializer.class));</div><div class="line">	setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</div><div class="line">	<span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来咱们对代码进行分析：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.resourceLoader = resourceLoader;</div><div class="line">Assert.notNull(primarySources, <span class="string">"PrimarySources must not be null"</span>);</div><div class="line"><span class="keyword">this</span>.primarySources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</div></pre></td></tr></table></figure></p>
<p>前三行对传入的参数进行进行了判断和赋值，从上面的参数可以看出resourceLoader为null，primarySources为我创建的启动类的名字ApringTestApplication。</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.webApplicationType = deduceWebApplicationType();</div></pre></td></tr></table></figure></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REACTIVE_WEB_ENVIRONMENT_CLASS = <span class="string">"org.springframework."</span></div><div class="line">			+ <span class="string">"web.reactive.DispatcherHandler"</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MVC_WEB_ENVIRONMENT_CLASS = <span class="string">"org.springframework."</span></div><div class="line">			+ <span class="string">"web.servlet.DispatcherServlet"</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] WEB_ENVIRONMENT_CLASSES = &#123; <span class="string">"javax.servlet.Servlet"</span>,</div><div class="line">			<span class="string">"org.springframework.web.context.ConfigurableWebApplicationContext"</span> &#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> WebApplicationType <span class="title">deduceWebApplicationType</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (ClassUtils.isPresent(REACTIVE_WEB_ENVIRONMENT_CLASS, <span class="keyword">null</span>)</div><div class="line">				&amp;&amp; !ClassUtils.isPresent(MVC_WEB_ENVIRONMENT_CLASS, <span class="keyword">null</span>)) &#123;</div><div class="line">			<span class="keyword">return</span> WebApplicationType.REACTIVE;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span> (String className : WEB_ENVIRONMENT_CLASSES) &#123;</div><div class="line">			<span class="keyword">if</span> (!ClassUtils.isPresent(className, <span class="keyword">null</span>)) &#123;</div><div class="line">				<span class="keyword">return</span> WebApplicationType.NONE;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> WebApplicationType.SERVLET;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>这里对当前的环境进行了判断，如果classpath中包含REACTIVE_WEB_ENVIRONMENT_CLASS并且不包含MVC_WEB_ENVIRONMENT_CLASS，则环境为REACTIVE。如果classpath中WEB_ENVIRONMENT_CLASSES有任意一个不包含，则环境为NONE。以上两者都不是就是SERVLET。<s>上面需要重点说明的是ClassUtils.isPresent的方法，这个方法在整个启动过程中多次使用。代码如下：</s></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">setInitializers((Collection) getSpringFactoriesInstances(</div><div class="line">				ApplicationContextInitializer.class));</div><div class="line">setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</div></pre></td></tr></table></figure></p>
<p>这两行代码是设置initializers和listeners，在启动的时候会用上。其中需要说明的是getSpringFactoriesInstances方法之后会多次出现，需要重点讲解一下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">Collection&lt;T&gt; <span class="title">getSpringFactoriesInstances</span><span class="params">(Class&lt;T&gt; type)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> getSpringFactoriesInstances(type, <span class="keyword">new</span> Class&lt;?&gt;[] &#123;&#125;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> &lt;T&gt; <span class="function">Collection&lt;T&gt; <span class="title">getSpringFactoriesInstances</span><span class="params">(Class&lt;T&gt; type,</span></span></div><div class="line">			Class&lt;?&gt;[] parameterTypes, Object... args) &#123;</div><div class="line">		ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</div><div class="line">		<span class="comment">// Use names and ensure unique to protect against duplicates</span></div><div class="line">		Set&lt;String&gt; names = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(SpringFactoriesLoader.loadFactoryNames(type, classLoader));</div><div class="line">		List&lt;T&gt; instances = createSpringFactoriesInstances(type, parameterTypes,</div><div class="line">				classLoader, args, names);</div><div class="line">		AnnotationAwareOrderComparator.sort(instances);</div><div class="line">		<span class="keyword">return</span> instances;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>这个过程中是首先获取当前线程的ClassLoader，之后根据SpringFactoriesLoader.loadFactoryNames获取需要的类的名字，最后获取类。下面是SpringFactoriesLoader.loadFactoryNames的方法实现：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FACTORIES_RESOURCE_LOCATION = <span class="string">"META-INF/spring.factories"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryClass, @Nullable ClassLoader classLoader)</span> </span>&#123;</div><div class="line">		String factoryClassName = factoryClass.getName();</div><div class="line">		<span class="keyword">return</span> loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList());</div><div class="line">	&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(<span class="meta">@Nullable</span> ClassLoader classLoader) &#123;</div><div class="line">		MultiValueMap&lt;String, String&gt; result = cache.get(classLoader);</div><div class="line">		<span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> result;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Enumeration&lt;URL&gt; urls = (classLoader != <span class="keyword">null</span> ?</div><div class="line">					classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</div><div class="line">					ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</div><div class="line">			result = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</div><div class="line">			<span class="keyword">while</span> (urls.hasMoreElements()) &#123;</div><div class="line">				URL url = urls.nextElement();</div><div class="line">				UrlResource resource = <span class="keyword">new</span> UrlResource(url);</div><div class="line">				Properties properties = PropertiesLoaderUtils.loadProperties(resource);</div><div class="line">				<span class="keyword">for</span> (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) &#123;</div><div class="line">					List&lt;String&gt; factoryClassNames = Arrays.asList(</div><div class="line">							StringUtils.commaDelimitedListToStringArray((String) entry.getValue()));</div><div class="line">					result.addAll((String) entry.getKey(), factoryClassNames);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			cache.put(classLoader, result);</div><div class="line">			<span class="keyword">return</span> result;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unable to load factories from location ["</span> +</div><div class="line">					FACTORIES_RESOURCE_LOCATION + <span class="string">"]"</span>, ex);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>获取缓存中是否有传入的classloader的名字的缓存，如果有就直接返回，没有继续深入。当传入的classloader部位null时，从传入的classloader中获取”META-INF/spring.factories”中的数据，并且整理成键值对的形式放入缓存，之后返回。从放回的键值对中获取需要的key对应的value。比如说这个例子中传入的ApplicationContextInitializer和ApplicationListener。对应的”META-INF/spring.factories”文件中的整体内容如下：</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"># PropertySource Loaders</div><div class="line">org.springframework.boot.env.PropertySourceLoader=\</div><div class="line">org.springframework.boot.env.PropertiesPropertySourceLoader,\</div><div class="line">org.springframework.boot.env.YamlPropertySourceLoader</div><div class="line"></div><div class="line"># Run Listeners</div><div class="line">org.springframework.boot.SpringApplicationRunListener=\</div><div class="line">org.springframework.boot.context.event.EventPublishingRunListener</div><div class="line"></div><div class="line"># Error Reporters</div><div class="line">org.springframework.boot.SpringBootExceptionReporter=\</div><div class="line">org.springframework.boot.diagnostics.FailureAnalyzers</div><div class="line"></div><div class="line"># Application Context Initializers</div><div class="line">org.springframework.context.ApplicationContextInitializer=\</div><div class="line">org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer,\</div><div class="line">org.springframework.boot.context.ContextIdApplicationContextInitializer,\</div><div class="line">org.springframework.boot.context.config.DelegatingApplicationContextInitializer,\</div><div class="line">org.springframework.boot.web.context.ServerPortInfoApplicationContextInitializer</div><div class="line"></div><div class="line"># Application Listeners</div><div class="line">org.springframework.context.ApplicationListener=\</div><div class="line">org.springframework.boot.ClearCachesApplicationListener,\</div><div class="line">org.springframework.boot.builder.ParentContextCloserApplicationListener,\</div><div class="line">org.springframework.boot.context.FileEncodingApplicationListener,\</div><div class="line">org.springframework.boot.context.config.AnsiOutputApplicationListener,\</div><div class="line">org.springframework.boot.context.config.ConfigFileApplicationListener,\</div><div class="line">org.springframework.boot.context.config.DelegatingApplicationListener,\</div><div class="line">org.springframework.boot.context.logging.ClasspathLoggingApplicationListener,\</div><div class="line">org.springframework.boot.context.logging.LoggingApplicationListener,\</div><div class="line">org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListener</div><div class="line"></div><div class="line"># Environment Post Processors</div><div class="line">org.springframework.boot.env.EnvironmentPostProcessor=\</div><div class="line">org.springframework.boot.cloud.CloudFoundryVcapEnvironmentPostProcessor,\</div><div class="line">org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessor,\</div><div class="line">org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor</div><div class="line"></div><div class="line"># Failure Analyzers</div><div class="line">org.springframework.boot.diagnostics.FailureAnalyzer=\</div><div class="line">org.springframework.boot.diagnostics.analyzer.BeanCurrentlyInCreationFailureAnalyzer,\</div><div class="line">org.springframework.boot.diagnostics.analyzer.BeanNotOfRequiredTypeFailureAnalyzer,\</div><div class="line">org.springframework.boot.diagnostics.analyzer.BindFailureAnalyzer,\</div><div class="line">org.springframework.boot.diagnostics.analyzer.BindValidationFailureAnalyzer,\</div><div class="line">org.springframework.boot.diagnostics.analyzer.UnboundConfigurationPropertyFailureAnalyzer,\</div><div class="line">org.springframework.boot.diagnostics.analyzer.ConnectorStartFailureAnalyzer,\</div><div class="line">org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzer,\</div><div class="line">org.springframework.boot.diagnostics.analyzer.PortInUseFailureAnalyzer,\</div><div class="line">org.springframework.boot.diagnostics.analyzer.ValidationExceptionFailureAnalyzer,\</div><div class="line">org.springframework.boot.diagnostics.analyzer.InvalidConfigurationPropertyNameFailureAnalyzer,\</div><div class="line">org.springframework.boot.diagnostics.analyzer.InvalidConfigurationPropertyValueFailureAnalyzer</div><div class="line"></div><div class="line"># FailureAnalysisReporters</div><div class="line">org.springframework.boot.diagnostics.FailureAnalysisReporter=\</div><div class="line">org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter</div></pre></td></tr></table></figure></p>
<p>包含需要的ApplicationContextInitializer：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Application Context Initializers</div><div class="line">org.springframework.context.ApplicationContextInitializer=\</div><div class="line">org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer,\</div><div class="line">org.springframework.boot.context.ContextIdApplicationContextInitializer,\</div><div class="line">org.springframework.boot.context.config.DelegatingApplicationContextInitializer,\</div><div class="line">org.springframework.boot.web.context.ServerPortInfoApplicationContextInitializer</div></pre></td></tr></table></figure></p>
<p>和ApplicationListener</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># Application Listeners</div><div class="line">org.springframework.context.ApplicationListener=\</div><div class="line">org.springframework.boot.ClearCachesApplicationListener,\</div><div class="line">org.springframework.boot.builder.ParentContextCloserApplicationListener,\</div><div class="line">org.springframework.boot.context.FileEncodingApplicationListener,\</div><div class="line">org.springframework.boot.context.config.AnsiOutputApplicationListener,\</div><div class="line">org.springframework.boot.context.config.ConfigFileApplicationListener,\</div><div class="line">org.springframework.boot.context.config.DelegatingApplicationListener,\</div><div class="line">org.springframework.boot.context.logging.ClasspathLoggingApplicationListener,\</div><div class="line">org.springframework.boot.context.logging.LoggingApplicationListener,\</div><div class="line">org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListener</div></pre></td></tr></table></figure></p>
<p>最后初始化的代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</div></pre></td></tr></table></figure></p>
<p>这里主要的是获取当前类的main方法，代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Class&lt;?&gt; deduceMainApplicationClass() &#123;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		StackTraceElement[] stackTrace = <span class="keyword">new</span> RuntimeException().getStackTrace();</div><div class="line">		<span class="keyword">for</span> (StackTraceElement stackTraceElement : stackTrace) &#123;</div><div class="line">			<span class="keyword">if</span> (<span class="string">"main"</span>.equals(stackTraceElement.getMethodName())) &#123;</div><div class="line">				<span class="keyword">return</span> Class.forName(stackTraceElement.getClassName());</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</div><div class="line">		<span class="comment">// Swallow and continue</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcly1ft6uaeq3x6j30et08c3zc.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2&gt;1. 入口&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;public static void main(String[] args) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	#1.初始化SpringApplication类，之后执行run方法&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    new SpringApplication(ApringTestApplication.class).run(args);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	#2.直接调用SpringApplication类中的run的静态方法&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	SpringApplication.run(ApringTestApplication.class, args);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一般来说，由以上两种的启动springboot的方法，但是两种方法草你个本质上来说是一样的。接下来咱们来看一下第二种方法中run静态方法中的执行：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; ConfigurableApplicationContext &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Class&amp;lt;?&amp;gt; primarySource,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		String... args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; run(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Class&amp;lt;?&amp;gt;[] &amp;#123; primarySource &amp;#125;, args);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
    
      <category term="spring" scheme="https://littlebaiyang.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>maven.test.skip和skipTests的区别</title>
    <link href="https://littlebaiyang.github.io/2017/06/14/maven/"/>
    <id>https://littlebaiyang.github.io/2017/06/14/maven/</id>
    <published>2017-06-13T16:00:00.000Z</published>
    <updated>2018-07-11T10:12:55.257Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>
<p>maven.test.skip和skipTests的区别</p>
<p>-DskipTests，不执行测试用例，但编译测试用例类生成相应的class文件至target/test-classes下。</p>
</li>
</ul>
<p><a id="more"></a></p>
<p>-Dmaven.test.skip=true，不执行测试用例，也不编译测试用例类。</p>
<p>不执行测试用例，但编译测试用例类生成相应的class文件至target/test-classes下。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;
&lt;p&gt;maven.test.skip和skipTests的区别&lt;/p&gt;
&lt;p&gt;-DskipTests，不执行测试用例，但编译测试用例类生成相应的class文件至target/test-classes下。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://littlebaiyang.github.io/tags/java/"/>
    
      <category term="maven" scheme="https://littlebaiyang.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>远程连接MySQL</title>
    <link href="https://littlebaiyang.github.io/2017/05/31/remote-Mysql/"/>
    <id>https://littlebaiyang.github.io/2017/05/31/remote-Mysql/</id>
    <published>2017-05-30T16:00:00.000Z</published>
    <updated>2018-07-11T10:10:00.148Z</updated>
    
    <content type="html"><![CDATA[<h2>第一步：修改配置文件的端口绑定</h2>
<p>打开的目录可能会根据MySQL的版本稍有不同，可以先尝试打开/etc/mysql/my.cnf这个配置文件，若该文件不存在或文件内容为空，则尝试下面的文件路径。</p>
<pre><code>sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf
</code></pre>
<p>在下面行的开头加上#，注释掉该行，然后保存退出vim：</p>
<pre><code>bind-address = 127.0.0.1
</code></pre>
<p><a id="more"></a></p>
<h2>第二步：修改访问权限</h2>
<p>进入mysql,输入如下命令，输入密码，进入mysql命令行</p>
<pre><code>mysql -u root -p
</code></pre>
<p>授权root用户访问权限，并刷新权限，此处的root可用其它MySQL用户替换，pwd部分需替换为该用户对应的密码</p>
<pre><code>grant all privileges on *.* to root@&quot;%&quot; identified by &quot;pwd&quot; with grant option;
flush privileges;
exit;
</code></pre>
<h2>第三步：重启mysql服务</h2>
<pre><code>service mysql restart
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;h2&gt;第一步：修改配置文件的端口绑定&lt;/h2&gt;
&lt;p&gt;打开的目录可能会根据MySQL的版本稍有不同，可以先尝试打开/etc/mysql/my.cnf这个配置文件，若该文件不存在或文件内容为空，则尝试下面的文件路径。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在下面行的开头加上#，注释掉该行，然后保存退出vim：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bind-address = 127.0.0.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="https://littlebaiyang.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>java Stream 的用法</title>
    <link href="https://littlebaiyang.github.io/2017/05/26/Stream/"/>
    <id>https://littlebaiyang.github.io/2017/05/26/Stream/</id>
    <published>2017-05-25T16:00:00.000Z</published>
    <updated>2018-07-11T10:10:00.126Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>[TOC]</p>
<p>Java8中提供了Stream对集合操作作出了极大的简化，学习了Stream之后，我们以后不用使用for循环就能对集合作出很好的操作。</p>
<h2>流的初始化与转换：</h2>
<p>Java中的Stream的所有操作都是针对流的，所以，使用Stream必须要得到Stream对象：</p>
<h3>始化一个流：</h3>
<pre><code>Stream stream = Stream.of(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);
</code></pre>
<h3>数组转换为一个流：</h3>
<pre><code>String [] strArray = new String[] {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;};
stream = Stream.of(strArray);
或者
stream = Arrays.stream(strArray);
</code></pre>
<h3>集合对象转换为一个流（Collections）：</h3>
<pre><code>List&lt;String&gt; list = Arrays.asList(strArray);
stream = list.stream();
</code></pre>
<p><a id="more"></a></p>
<h2>流的操作：</h2>
<pre><code>流的操作可以归结为几种：
</code></pre>
<h3>遍历操作(map)：</h3>
<pre><code>使用map操作可以遍历集合中的每个对象，并对其进行操作，map之后，用.collect(Collectors.toList())会得到操作后的集合。
</code></pre>
<h4>遍历转换为大写：</h4>
<pre><code>List&lt;String&gt; output = wordList.stream().
     map(String::toUpperCase).
           collect(Collectors.toList());
</code></pre>
<h4>平方数：</h4>
<pre><code>List&lt;Integer&gt; nums = Arrays.asList(1, 2, 3, 4);
   List&lt;Integer&gt; squareNums = nums.stream().
         map(n -&gt; n * n).
       collect(Collectors.toList());
</code></pre>
<h3>过滤操作(filter)：</h3>
<pre><code>使用filter可以对象Stream中进行过滤，通过测试的元素将会留下来生成一个新的Stream。
</code></pre>
<h4>得到其中不为空的String</h4>
<pre><code>List&lt;String&gt; filterLists = new ArrayList&lt;&gt;();
filterLists.add(&quot;&quot;);
filterLists.add(&quot;a&quot;);
filterLists.add(&quot;b&quot;);
List afterFilterLists = filterLists.stream()
       .filter(s -&gt; !s.isEmpty())
        .collect(Collectors.toList());
</code></pre>
<h3>循环操作(forEach):</h3>
<pre><code>如果只是想对流中的每个对象进行一些自定义的操作，可以使用forEach：
List&lt;String&gt; forEachLists = new ArrayList&lt;&gt;();
forEachLists.add(&quot;a&quot;);
forEachLists.add(&quot;b&quot;);
forEachLists.add(&quot;c&quot;);
forEachLists.stream().forEach(s-&gt; System.out.println(s));
</code></pre>
<h3>返回特定的结果集合（limit/skip）：</h3>
<pre><code>limit 返回 Stream 的前面 n 个元素；skip 则是扔掉前 n 个元素:
List&lt;String&gt; forEachLists = new ArrayList&lt;&gt;();
forEachLists.add(&quot;a&quot;);
forEachLists.add(&quot;b&quot;);
forEachLists.add(&quot;c&quot;);
forEachLists.add(&quot;d&quot;);
forEachLists.add(&quot;e&quot;);
forEachLists.add(&quot;f&quot;);
List&lt;String&gt; limitLists = forEachLists.stream().skip(2).limit(3).collect(Collectors.toList());
注意skip与limit是有顺序关系的，比如使用skip(2)会跳过集合的前两个，返回的为c、d、e、f,然后调用limit(3)会返回前3个，所以最后返回的c,d,e
</code></pre>
<h3>排序（sort/min/max/distinct）：</h3>
<pre><code>sort可以对集合中的所有元素进行排序。max，min可以寻找出流中最大或者最小的元素，而distinct可以寻找出不重复的元素：
</code></pre>
<h4>对一个集合进行排序：</h4>
<pre><code>List&lt;Integer&gt; sortLists = new ArrayList&lt;&gt;();
sortLists.add(1);
sortLists.add(4);
sortLists.add(6);
sortLists.add(3);
sortLists.add(2);
List&lt;Integer&gt; afterSortLists = sortLists.stream().sorted((In1,In2)-&gt;
       In1-In2).collect(Collectors.toList());
</code></pre>
<h4>得到其中长度最大的元素：</h4>
<pre><code>List&lt;String&gt; maxLists = new ArrayList&lt;&gt;();
maxLists.add(&quot;a&quot;);
maxLists.add(&quot;b&quot;);
maxLists.add(&quot;c&quot;);
maxLists.add(&quot;d&quot;);
maxLists.add(&quot;e&quot;);
maxLists.add(&quot;f&quot;);
maxLists.add(&quot;hahaha&quot;);
int maxLength = maxLists.stream().mapToInt(s-&gt;s.length()).max().getAsInt();
System.out.println(&quot;字符串长度最长的长度为&quot;+maxLength);
</code></pre>
<h4>对一个集合进行查重：</h4>
<pre><code>List&lt;String&gt; distinctList = new ArrayList&lt;&gt;();
distinctList.add(&quot;a&quot;);
distinctList.add(&quot;a&quot;);
distinctList.add(&quot;c&quot;);
distinctList.add(&quot;d&quot;);
List&lt;String&gt; afterDistinctList = distinctList.stream().distinct().collect(Collectors.toList());
其中的distinct()方法能找出stream中元素equal()，即相同的元素，并将相同的去除，上述返回即为a,c,d。
</code></pre>
<h3>匹配(Match方法)：</h3>
<pre><code>有的时候，我们只需要判断集合中是否全部满足条件，或者判断集合中是否有满足条件的元素，这时候就可以使用match方法：
allMatch：Stream 中全部元素符合传入的 predicate，返回 true
anyMatch：Stream 中只要有一个元素符合传入的 predicate，返回 true
noneMatch：Stream 中没有一个元素符合传入的 predicate，返回 true
</code></pre>
<h4>判断集合中没有有为‘c’的元素：</h4>
<pre><code>List&lt;String&gt; matchList = new ArrayList&lt;&gt;();
matchList.add(&quot;a&quot;);
matchList.add(&quot;a&quot;);
matchList.add(&quot;c&quot;);
matchList.add(&quot;d&quot;); 
boolean isExits = matchList.stream().anyMatch(s -&gt; s.equals(&quot;c&quot;));
</code></pre>
<h4>判断集合中是否全不为空：</h4>
<pre><code>List&lt;String&gt; matchList = new ArrayList&lt;&gt;();
matchList.add(&quot;a&quot;);
matchList.add(&quot;&quot;);
matchList.add(&quot;a&quot;);
matchList.add(&quot;c&quot;);
matchList.add(&quot;d&quot;);
boolean isNotEmpty = matchList.stream().noneMatch(s -&gt; s.isEmpty());
则返回的为false
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;Java8中提供了Stream对集合操作作出了极大的简化，学习了Stream之后，我们以后不用使用for循环就能对集合作出很好的操作。&lt;/p&gt;
&lt;h2&gt;流的初始化与转换：&lt;/h2&gt;
&lt;p&gt;Java中的Stream的所有操作都是针对流的，所以，使用Stream必须要得到Stream对象：&lt;/p&gt;
&lt;h3&gt;始化一个流：&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Stream stream = Stream.of(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;数组转换为一个流：&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;String [] strArray = new String[] {&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;};
stream = Stream.of(strArray);
或者
stream = Arrays.stream(strArray);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;集合对象转换为一个流（Collections）：&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;List&amp;lt;String&amp;gt; list = Arrays.asList(strArray);
stream = list.stream();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://littlebaiyang.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA For Mac 快捷键 (一)</title>
    <link href="https://littlebaiyang.github.io/2017/05/12/idea-for-mac/"/>
    <id>https://littlebaiyang.github.io/2017/05/12/idea-for-mac/</id>
    <published>2017-05-11T16:00:00.000Z</published>
    <updated>2018-07-11T10:12:55.251Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p>
<h3>Mac键盘符号和修饰键说明</h3>
<pre><code>⌘ Command⇧ Shift⌥ Option
⌃ Control
↩︎ Return/Enter
⌫ Delete
⌦ 向前删除键（Fn+Delete）
↑ 上箭头
↓ 下箭头
← 左箭头
→ 右箭头
⇞ Page Up（Fn+↑）
⇟ Page Down（Fn+↓）
Home Fn + ←
End Fn + →
⇥ 右制表符（Tab键）  
⇤ 左制表符（Shift+Tab）
⎋ Escape (Esc)
</code></pre>
<p><a id="more"></a></p>
<h3>Editing（编辑）</h3>
<pre><code>⌃Space 基本的代码补全（补全任何类、方法、变量）
⌃⇧Space 智能代码补全（过滤器方法列表和变量的预期类型）
⌘⇧↩ 自动结束代码，行末自动添加分号
⌘P 显示方法的参数信息
⌃J, Mid. button click 快速查看文档
⇧F1 查看外部文档（在某些代码上会触发打开浏览器显示相关文档）
⌘+鼠标放在代码上 显示代码简要信息
⌘F1 在错误或警告处显示具体描述信息
⌘N, ⌃↩, ⌃N 生成代码（getter、setter、构造函数、hashCode/equals,toString）
⌃O 覆盖方法（重写父类方法）
⌃I 实现方法（实现接口中的方法）
⌘⌥T 包围代码（使用if..else, try..catch, for, synchronized等包围选中的代码）
⌘/ 注释/取消注释与行注释
⌘⌥/ 注释/取消注释与块注释
⌥↑ 连续选中代码块
⌥↓ 减少当前选中的代码块
⌃⇧Q 显示上下文信息
⌥↩ 显示意向动作和快速修复代码
⌘⌥L 格式化代码
⌃⌥O 优化import
⌃⌥I 自动缩进线
⇥ / ⇧⇥ 缩进代码 / 反缩进代码
⌘X 剪切当前行或选定的块到剪贴板
⌘C 复制当前行或选定的块到剪贴板
⌘V 从剪贴板粘贴
⌘⇧V 从最近的缓冲区粘贴
⌘D 复制当前行或选定的块
⌘⌫ 删除当前行或选定的块的行
⌃⇧J 智能的将代码拼接成一行
⌘↩ 智能的拆分拼接的行
⇧↩ 开始新的一行
⌘⇧U 大小写切换
⌘⇧] / ⌘⇧[ 选择直到代码块结束/开始
⌥⌦ 删除到单词的末尾（⌦键为Fn+Delete）
⌥⌫ 删除到单词的开头
⌘+ / ⌘- 展开 / 折叠代码块
⌘⇧+ 展开所以代码块
⌘⇧- 折叠所有代码块
⌘W 关闭活动的编辑器选项卡
</code></pre>
<h3>Search/Replace（查询/替换）</h3>
<pre><code>Double ⇧ 查询任何东西
⌘F 文件内查找
⌘G 查找模式下，向下查找
⌘⇧G 查找模式下，向上查找
⌘R 文件内替换
⌘⇧F 全局查找（根据路径）
⌘⇧R 全局替换（根据路径）
⌘⇧S 查询结构（Ultimate Edition 版专用，需要在Keymap中设置）
⌘⇧M 替换结构（Ultimate Edition 版专用，需要在Keymap中设置）
</code></pre>
<h3>Usage Search（使用查询）</h3>
<pre><code>⌥F7 / ⌘F7 在文件中查找用法 / 在类中查找用法
⌘⇧F7 在文件中突出显示的用法
⌘⌥F7 显示用法
</code></pre>
<h3>Compile and Run（编译和运行）</h3>
<pre><code>⌘F9 编译Project
⌘⇧F9 编译选择的文件、包或模块
⌃⌥R 弹出 Run 的可选择菜单
⌃⌥D 弹出 Debug 的可选择菜单
⌃R 运行
⌃D 调试
⌃⇧R, ⌃⇧D 从编辑器运行上下文环境配置
</code></pre>
<h3>Debugging（调试）</h3>
<pre><code>F8 进入下一步，如果当前行断点是一个方法，则不进入当前方法体内
F7 进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中
⇧F7 智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法
⇧F8 跳出
⌥F9 运行到光标处，如果光标前有其他断点会进入到该断点
⌥F8 计算表达式（可以更改变量值使其生效）
⌘⌥R 恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上
⌘F8 切换断点（若光标当前行有断点则取消断点，没有则加上断点）
⌘⇧F8 查看断点信息
</code></pre>
<h3>Navigation（导航）</h3>
<pre><code>⌘O 查找类文件
⌘⇧O 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/
⌘⌥O 前往指定的变量 / 方法
⌃← / ⌃→ 左右切换打开的编辑tab页
F12 返回到前一个工具窗口
⎋ 从工具窗口进入代码文件窗口
⇧⎋ 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口
⌘⇧F4 关闭活动run/messages/find/... tab
⌘L 在当前文件跳转到某一行的指定处
⌘E 显示最近打开的文件记录列表
⌘⌥← / ⌘⌥→ 退回 / 前进到上一个操作的地方
⌘⇧⌫ 跳转到最后一个编辑的地方
⌥F1 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)
⌘B / ⌘ 鼠标点击 进入光标所在的方法/变量的接口或是定义处
⌘⌥B 跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口
⌥ Space, ⌘Y 快速打开光标所在方法、类的定义
⌃⇧B 跳转到类型声明处
⌘U 前往当前光标所在方法的父类的方法 / 接口定义
⌃↓ / ⌃↑ 当前光标跳转到当前文件的前一个/后一个方法名位置
⌘] / ⌘[ 移动光标到当前所在代码的花括号开始/结束位置
⌘F12 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）
⌃H 显示当前类的层次结构
⌘⇧H 显示方法层次结构
⌃⌥H 显示调用层次结构
F2 / ⇧F2 跳转到下一个/上一个突出错误或警告的位置
F4 / ⌘↓ 编辑/查看代码源
⌥ Home 显示到当前文件的导航条
F3选中文件/文件夹/代码行，添加/取消书签
⌥F3 选中文件/文件夹/代码行，使用助记符添加/取消书签
⌃0...⌃9 定位到对应数值的书签位置
⌘F3 显示所有书签
</code></pre>
<h3>Refactoring（重构）</h3>
<pre><code>F5 复制文件到指定目录
F6 移动文件到指定目录
⌘⌫ 在文件上为安全删除文件，弹出确认框
⇧F6 重命名文件
⌘F6 更改签名
⌘⌥N 一致性
⌘⌥M 将选中的代码提取为方法
⌘⌥V 提取变量
⌘⌥F 提取字段
⌘⌥C 提取常量
⌘⌥P 提取参数
</code></pre>
<h3>VCS/Local History（版本控制/本地历史记录）</h3>
<pre><code>⌘K 提交代码到版本控制器
⌘T 从版本控制器更新代码
⌥⇧C 查看最近的变更记录
⌃C 快速弹出版本控制器操作面板
</code></pre>
<h3>Live Templates（动态代码模板）</h3>
<pre><code>⌘⌥J 弹出模板选择窗口，将选定的代码使用动态模板包住
⌘J 插入自定义动态代码模板
</code></pre>
<h3>General（通用）</h3>
<pre><code>⌘1...⌘9 打开相应编号的工具窗口
⌘S 保存所有
⌘⌥Y 同步、刷新
⌃⌘F 切换全屏模式
⌘⇧F12 切换最大化编辑器
⌥⇧F 添加到收藏夹
⌥⇧I 检查当前文件与当前的配置文件
§⌃, ⌃` 快速切换当前的scheme（切换主题、代码样式等）
⌘, 打开IDEA系统设置
⌘; 打开项目结构对话框
⇧⌘A 查找动作（可设置相关选项）
⌃⇥ 编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上delete，则是关闭对应选中的窗口）
</code></pre>
<h3>Other（一些官方文档上没有体现的快捷键）</h3>
<pre><code>⌘⇧8 竖编辑模式
</code></pre>
<h4>导航</h4>
<pre><code>⌘O 查找类文件 Ctrl + N

⌘⌥O 前往指定的变量 / 方法 Ctrl + Shift + Alt + N

⌃← / ⌃→ 左右切换打开的编辑tab页 Alt← / Alt→

⎋ 从工具窗口进入代码文件窗口 ESC

⌘L 在当前文件跳转到某一行的指定处 Ctrl + G

⌘E 显示最近打开的文件记录列表 Ctrl + E

⌘⌥← / ⌘⌥→ 退回 / 前进到上一个操作的地方 Ctrl + Alt + ← Ctrl + Alt + →

⌘⇧⌫ 跳转到最后一个编辑的地方

⌃H 显示当前类的层次结构 Ctrl + H

⌘⇧H 显示方法层次结构

⌃⌥H 显示调用层次结构

F4 / ⌘↓ 编辑/查看代码源

⌘⌥U 显示类UML图

⌃J 查看注释
</code></pre>
<h4>编辑</h4>
<pre><code>⌥⌦ 删除到单词的末尾（⌦键为Fn+Delete）

⌥⌫ 删除到单词的开头

⌘+ / ⌘- 展开 / 折叠代码块

⌘F1 在错误或警告处显示具体描述信息

⌘⌥L 格式化代码

⌃⌥O 优化import

⇧↩ 开始新的一行

⌘⇧↩ 自动结束代码，行末自动添加分号

⌃I 实现方法（实现接口中的方法）

⇧F6 重命名文件或者变量

⌘N, ⌃↩, ⌃N 生成代码（getter、setter、构造函数、hashCode/equals,toString）

⌘P 显示方法的参数信息
</code></pre>
<h4>查找</h4>
<pre><code>Double⇧ 查找任何东西

⌘⇧F 全局查找（根据路径）

⌘F 文件内查找

⌘G 查找模式下，向下查找

⌘⇧G 查找模式下，向上查找
</code></pre>
<h4>导航</h4>
<pre><code>⌘⌥B 跳转到接口的实现

⌘U 查看接口定义

⌘⌥← / ⌘⌥→ 退回 / 前进到上一个操作的地方

⌘B / ⌘ 鼠标点击 进入光标所在的方法/变量的接口或是定义处

⌃⇧B 跳转到类型声明处

⌥ Space, ⌘Y 快速打开光标所在方法、类的定义

⌘O 查找类文件

⌘⇧O 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/

F12 返回到前一个工具窗口

⎋ 从工具窗口进入代码文件窗口

⇧⎋ 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口

F3选中文件/文件夹/代码行，添加/取消书签

⌥F3 选中文件/文件夹/代码行，使用助记符添加/取消书签

⌃0…⌃9 定位到对应数值的书签位置

⌘F3 显示所有书签

⌥F1 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)

⌘F12 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）
</code></pre>
<h4>通用</h4>
<pre><code>⌃⌘F 切换全屏模式
</code></pre>
<p>​</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3&gt;Mac键盘符号和修饰键说明&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;⌘ Command⇧ Shift⌥ Option
⌃ Control
↩︎ Return/Enter
⌫ Delete
⌦ 向前删除键（Fn+Delete）
↑ 上箭头
↓ 下箭头
← 左箭头
→ 右箭头
⇞ Page Up（Fn+↑）
⇟ Page Down（Fn+↓）
Home Fn + ←
End Fn + →
⇥ 右制表符（Tab键）  
⇤ 左制表符（Shift+Tab）
⎋ Escape (Esc)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
    
    </summary>
    
    
      <category term="idea" scheme="https://littlebaiyang.github.io/tags/idea/"/>
    
      <category term="MySQL" scheme="https://littlebaiyang.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>如何使用hexo</title>
    <link href="https://littlebaiyang.github.io/2017/04/23/secode/"/>
    <id>https://littlebaiyang.github.io/2017/04/23/secode/</id>
    <published>2017-04-22T16:00:00.000Z</published>
    <updated>2018-07-11T10:11:51.561Z</updated>
    
    <content type="html"><![CDATA[<p>由于自己对hexo不是很熟悉，所以在这里将hexo的使用过程和一些其他的心得写下来，希望对其他人有用。</p>
<ul>
<li>清理 类似于maven的命令  mvn clean</li>
</ul>
<pre><code> hexo clean
</code></pre>
<ul>
<li>生成页面  类似于maven中的mvn install</li>
</ul>
<pre><code>hexo generate
</code></pre>
<p><a id="more"></a></p>
<ul>
<li>推到远程</li>
</ul>
<pre><code>hexo deploy
</code></pre>
<ul>
<li>本地观看实现的代码</li>
</ul>
<pre><code>hexo server 
</code></pre>
<p>​<br>
hexo中添加分段的more，以下添加之后，上方内容为预览</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;escape&gt;&lt;!-- more --&gt;&lt;/escape&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于自己对hexo不是很熟悉，所以在这里将hexo的使用过程和一些其他的心得写下来，希望对其他人有用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;清理 类似于maven的命令  mvn clean&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt; hexo clean
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;生成页面  类似于maven中的mvn install&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;hexo generate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://littlebaiyang.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>第一次发布博客</title>
    <link href="https://littlebaiyang.github.io/2016/01/13/first/"/>
    <id>https://littlebaiyang.github.io/2016/01/13/first/</id>
    <published>2016-01-12T16:00:00.000Z</published>
    <updated>2018-07-11T01:55:10.342Z</updated>
    
    <content type="html"><![CDATA[<p>这是第一次写笔记</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是第一次写笔记&lt;/p&gt;

    
    </summary>
    
      <category term="java" scheme="https://littlebaiyang.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://littlebaiyang.github.io/tags/java/"/>
    
  </entry>
  
</feed>
